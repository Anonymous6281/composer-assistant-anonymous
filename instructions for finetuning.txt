1) Edit the paths in constants.py.

2) Put your midi files in the folders PATH_TO_TRAIN_MIDI, PATH_TO_VAL_MIDI, and PATH_TO_TEST_MIDI, as you defined in constants.py (as appropriate).

3) Run preprocess_midi.py. This will create large files in the folders PATH_TO_PROCESSED_TRAIN_MIDI, PATH_TO_PROCESSED_VAL_MIDI, and PATH_TO_PROCESSED_TEST_MIDI. Expect these files to consume about 2.5x the disk space as your midi files take. This will use all CPU cores available, and will probably take a while. For instance, each core on an i5-6600 can process about 5000 midi files per hour. You can remove the original midi files after this.

4) Edit and run build_finetune_train_data.py. You will need to build the data for epoch n before you can finetune on epoch n. You can build the data for epoch 0, then finetune on epoch 0 while building the data for epoch 1, then finetune on epoch 1, etc. 

5) Edit the top area in finetune_model.py, then run finetune_model.py.

6) Continue alternating between build_finetune_train_data.py and finetune_model.py until done.

7) To validate your finetuned model, first run build_val_and_test_finetune_data.py. This will create data for validation in the folder PATH_TO_TEMP_FILES. Once you've done that, at any point in the process after finetuning epoch n has completed, you may run validate_finetuned_model.py (after editing the top and bottom areas of the file). This will create metrics folders inside of each finetuned checkpoint folder with the validation results for that model.